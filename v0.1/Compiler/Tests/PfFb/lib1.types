id :: a -> a
eq :: (a, a) -> Bool
fst :: (a, b) -> a
snd :: (a, b) -> b
dup :: a -> (a, a)

not :: Bool -> Bool
and :: (Bool, Bool) -> Bool
or :: (Bool, Bool) -> Bool

maxiv :: () -> Int
miniv :: () -> Int

addi :: (Int, Int) -> Int
subi :: (Int, Int) -> Int
muli :: (Int, Int) -> Int
divi :: (Int, Int) -> Int
modi :: (Int, Int) -> Int
mini :: (Int, Int) -> Int
maxi :: (Int, Int) -> Int
negi :: Int -> Int

eqi :: (Int, Int) -> Bool
gti :: (Int, Int) -> Bool
gtei :: (Int, Int) -> Bool
lti :: (Int, Int) -> Bool
ltei :: (Int, Int) -> Bool

maxfv :: () -> Float
minfv :: () -> Float

divf :: (Float, Float) -> Float
mulf :: (Float, Float) -> Float
addf :: (Float, Float) -> Float
subf :: (Float, Float) -> Float
minf :: (Float, Float) -> Float
maxf :: (Float, Float) -> Float
negf :: Float -> Float
randf :: Null -> Float
sqrt :: Float -> Float

eqf :: (Float, Float) -> Bool
gtf :: (Float, Float) -> Bool
gtef :: (Float, Float) -> Bool
ltf :: (Float, Float) -> Bool
ltef :: (Float, Float) -> Bool

intToFloat :: Int -> Float
floatToInt :: Float -> Int

ifFun :: (Bool, () -> a, () -> a) -> a

reduceList :: ((v,v) -> v, List v) -> v
mapList :: (v -> w, List v) -> List w
groupReduce :: (v -> k, v -> w, (w,w) -> w, w, List v) -> Map k w
genFloats :: Int -> List Float
sortList :: ((v,v) -> Bool, List v) -> List v
take :: (Int, List v) -> List v
head :: List v -> v

reduceMap :: ((k,v) -> w, (w,w) -> w, w, Map k v) -> w
mapMap :: ((k,v) -> (i,w), Map k v) -> Map i w
groupReduceMap :: ((k,v) -> i, (k,v) -> w, (w,w) -> w, w, Map k v) -> Map i w
genFloatMap :: Int -> Map Int Float

readVMap :: DMap Vec k v of pf d m -> DMap Stm k v of pf d m
saveVMap :: DMap Stm k v of pf d m -> DMap Vec k v of pf d m
sortVMap :: DMap Vec k v of1 pf d m -> DMap Vec k v of2 pf d m

repartVMap :: DMap Vec k v of pf1 d1 m -> DMap Vec k v of pf2 d2 ()
mirrVMap :: DMap Vec k v of pf d m1 -> DMap Vec k v of pf d m2
sieveVMap :: DMap Vec k v of pf d m1 -> DMap Vec k v of pf d ()

reduceSMap :: ((k,v) -> w, (w,w) -> w, w, DMap Stm k v of pf d m) -> w
mapSMap1 (f,_) :: ((k,v) -> (i,w), DMap Stm k v (FSeq of f) (FSeq pf f) d m) -> DMap Stm k v of pf d m
mapSMap2 :: ((k,v) -> (i,w), DMap Stm k v of pf d m) -> DMap Stm i w FNull UniVar d m
groupReduceVMap1 (f,_,_,_,_) :: ((k,v) -> i, (k,v) -> w, (w,w) -> w, w, DMap Stm k v f f d m) -> DMap Vec i w FFst FFst d m
groupReduceVMap2 (f,_,_,_,_) :: ((k,v) -> i, (k,v) -> w, (w,w) -> w, w, DMap Stm k v of f d m) -> DMap Vec i w FFst FFst d m
groupReduceVMap3 :: ((k,v) -> i, (k,v) -> w, (w,w) -> w, w, DMap Stm k v of pf d m) -> DMap Vec i w FFst FFst d m
groupReduceVMap4 :: ((k,v) -> i, (k,v) -> w, (w,w) -> w, w, DMap Stm k v of FFst d m) -> DMap Vec i w FFst FFst d m
genFloatSMap :: Int -> DMap Stm Int Float FNull UniVar d ()

