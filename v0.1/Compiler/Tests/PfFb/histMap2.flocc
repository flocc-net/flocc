let hist = (\(N,D) -> -- :: (Int, Map k Float) 
  -- use min/max vals as x-axis bounds
  let (minV, maxV) = reduceSMap (\(k,v) -> (v,v),
    \((x1,y1),(x2,y2)) -> (minf (x1,x2), maxf (y1,y2)),
    (maxfv (), minfv ()), D) in
  -- scaling coefficient to get bucket ids 
  let i = floatToInt (divf (subi (N, 1), subf (maxV, minV))) in
  let D' = mapSMap2 (\(k,v) -> (k, mulf (v,i)), D) in
  -- group by bucket & count group sizes
  groupReduceVMap4 (snd, \_ -> 1, addi, 0, D')) in
-- run on random test data
hist (100, genFloatSMap 200000)
